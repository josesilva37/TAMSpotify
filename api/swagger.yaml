openapi: '3.0.2'
info:
  title: SAWM API
  version: '1.0'
servers:
  - url: http://localhost:3080
paths:
  /User/{token}:
    get:
      tags:
        - User
      summary: Get user information
      parameters:
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /UserPlaylists/{token}:
    get:
      tags:
        - User
      summary: Get user playlists
      parameters:
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User playlists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /UserTopTracks/{time}/{token}:
    get:
      tags:
        - User
      summary: Get user top tracks
      parameters:
        - name: time
          in: path
          description: Time range for top tracks
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User top tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /UserTopArtists:
    get:
      tags:
        - User
      summary: Get user top artists
      parameters:
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
        - name: time
          in: query
          description: Time range for top artists
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User top artists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /UserAlbums/{token}:
    get:
      tags:
        - User
      summary: Get user albums
      parameters:
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User albums
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /UserAlbum/{id}/{token}:
    get:
      tags:
        - User
      summary: Get user album by ID
      parameters:
        - name: id
          in: path
          description: Album ID
          required: true
          schema:
            type: string
        - name: token
          in: path
          description: Spotify access token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /addLikedSong/{id}/{token}:
    put:
      tags:
        - Liked Songs
      summary: Add a new liked song
      description: Add a new liked song to the user's liked songs
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the song to be added
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The user's access token
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /listLikedSongs/{offset}/{token}:
    get:
      tags:
        - Liked Songs
      summary: Get a list of the user's liked songs
      description: Get a list of the user's liked songs with optional pagination
      parameters:
        - name: offset
          in: path
          required: true
          description: The index of the first liked song to return
          schema:
            type: integer
            format: int64
        - name: token
          in: path
          required: true
          description: The user's access token
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /deleteLikedSong/{id}/{token}:
    delete:
      tags:
        - Liked Songs
      summary: Delete a liked song
      description: Delete a liked song from the user's liked songs
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the song to be deleted
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The user's access token
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /isLikedSong/{id}/{token}:
    get:
      tags:
        - Liked Songs
      summary: Check if a song is in the user's liked songs
      description: Check if a song is in the user's liked songs
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the song to be checked
          schema:
            type: string
        - name: token
          in: path
          required: true
          description: The user's access token
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
